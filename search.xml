<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javaScript基础知识</title>
    <url>/2020/10/19/javaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="javaScript基础教程"><a href="#javaScript基础教程" class="headerlink" title="javaScript基础教程"></a>javaScript基础教程</h1><h2 id="1-javaScript简介："><a href="#1-javaScript简介：" class="headerlink" title="1.javaScript简介："></a>1.javaScript简介：</h2><h3 id="1-1javascript的历史："><a href="#1-1javascript的历史：" class="headerlink" title="1.1javascript的历史："></a>1.1javascript的历史：</h3><p>要了解JavaScript，我们首先要回顾一下JavaScript的诞生。</p>
<p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>
<p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫Brendan Eich这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p>
<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>
<a id="more"></a>

<h3 id="1-2ECMAScript"><a href="#1-2ECMAScript" class="headerlink" title="1.2ECMAScript"></a>1.2ECMAScript</h3><p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为ECMAScript标准。</p>
<p>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>
<p>那为什么不直接把JavaScript定为标准呢？因为JavaScript是网景的注册商标。</p>
<p>不过大多数时候，我们还是用JavaScript这个词。如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>
<h3 id="1-3JavaScript版本"><a href="#1-3JavaScript版本" class="headerlink" title="1.3JavaScript版本"></a><strong>1.3JavaScript版本</strong></h3><p>JavaScript语言是在10天时间内设计出来的，虽然语言的设计者水平非常NB，但谁也架不住“时间紧，任务重”，所以，JavaScript有很多设计缺陷，我们后面会慢慢讲到。</p>
<p>此外，由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>
<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>
<p>不过，JavaScript的核心语法并没有多大变化。我们的教程会先讲JavaScript最核心的用法，然后，针对ES6讲解新增特性。</p>
<h2 id="2-Js基本数据类型："><a href="#2-Js基本数据类型：" class="headerlink" title="2.Js基本数据类型："></a>2.Js基本数据类型：</h2><h3 id="2-1number"><a href="#2-1number" class="headerlink" title="2.1number"></a>2.1number</h3><p>javascript是不区分浮点数和整数的，统一用number表示，一下都是合法的number类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>; <span class="comment">// 整数123 </span></span><br><span class="line"><span class="number">0.456</span>; <span class="comment">// 浮点数0.456 </span></span><br><span class="line"><span class="number">1.2345e3</span>; <span class="comment">// 科学计数法表示1.2345x1000，等同于1234.5 </span></span><br><span class="line">-<span class="number">99</span>; <span class="comment">// 负数 </span></span><br><span class="line"><span class="literal">NaN</span>; <span class="comment">// NaN表示Not a Number，当无法计算结果时用NaN表示 </span></span><br><span class="line"><span class="literal">Infinity</span>; <span class="comment">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就 表示为Infinity</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2string"><a href="#2-2string" class="headerlink" title="2.2string"></a>2.2string</h3><p>字符串是以单引号’或双引号”括起来的任意文本，比如 ‘abc’ ， “xyz” 等等。请注意， ‘’ 或 “” 本身只是一种表示方式，不是字符串的一部分，因此，字符串 ‘abc’ 只有a ， b ， c 这3个字符。</p>
<h3 id="2-3boolean"><a href="#2-3boolean" class="headerlink" title="2.3boolean"></a>2.3boolean</h3><p>2.3.1布尔值和布尔代数的表示完全一致，一个布尔值只有 true 、 false 两种值，要么是 true ，要么是 false ，可以直接用 true 、 false 表示布尔值，也可以通过布尔运算计算出来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>; <span class="comment">// 这是一个true值 </span></span><br><span class="line"><span class="literal">false</span>; <span class="comment">// 这是一个false值 </span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">1</span>; <span class="comment">// 这是一个true值 </span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">3</span>; <span class="comment">// 这是一个false值</span></span><br></pre></td></tr></table></figure>

<p>2.3.2运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span>; <span class="comment">// 这个&amp;&amp;语句计算结果为true </span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// 这个&amp;&amp;语句计算结果为false </span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// 这个&amp;&amp;语句计算结果为false</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">false</span>; <span class="comment">// 这个||语句计算结果为false </span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// 这个||语句计算结果为true </span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// 这个||语句计算结果为true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4null和undefined"><a href="#2-4null和undefined" class="headerlink" title="2.4null和undefined"></a>2.4null和undefined</h3><p>null 表示一个“空”的值，它和 0 以及空字符串 ‘’ 不同， 0 是一个数值， ‘’ 表示长度为0的字符串，而 null 表示“空”。</p>
<p>在其他语言中，也有类似JavaScript的 null 的表示，例如Java也用 null ，Swift用 nil ，Python用 None 表示。但是，在JavaScript中，还有一个和 null 类似的 undefined ，它表示“未定义”。</p>
<h3 id="2-5Object"><a href="#2-5Object" class="headerlink" title="2.5Object"></a>2.5Object</h3><p><strong>对象分为内建对象和宿主对象，内建对象例如Array，Date，Math等。除了内建对象，还可以在js脚本里使用一些预先定义好的其他对象。这些对象不是由js语言本身而是由他的运行环境提供的。具体到web应用，这个环境就是浏览器。由浏览器预先编译好的对象称为宿主对象，包括Form，Image，Element。</strong></p>
<p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">     name:<span class="string">&#x27;weiwen&#x27;</span>,</span><br><span class="line">     age:<span class="number">23</span>,</span><br><span class="line">     intrest:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;java&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述 person 对象一共定义了6个键值对，其中每个键又称为对象的属性.</p>
<p>要获取一个对象的属性，我们用 对象变量.属性名 的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name<span class="comment">//weiwen</span></span><br><span class="line">person.age<span class="comment">//23</span></span><br></pre></td></tr></table></figure>

<h3 id="2-6Symbol-es6新标准"><a href="#2-6Symbol-es6新标准" class="headerlink" title="2.6Symbol (es6新标准)"></a>2.6Symbol (es6新标准)</h3><p>表示一个独一无二的值，最大的用法是用来定义对象的唯一属性名。引入symbol是因为es5的对象中的属性名是字符串，容易造成属性名的冲突。使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sy = <span class="built_in">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> syObject = &#123;&#125;;</span><br><span class="line">syObject[sy] = <span class="string">&quot;weiwen&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(syObject)  <span class="comment">//&#123;Symbol(key): &quot;weiwen&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>JavaScript的 Array 可以包含任意数据类型，并通过索引来访问每个元素。要取得 Array 的长度，直接访问 <strong>length</strong> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>]; </span><br><span class="line">arr.length; <span class="comment">// 6 </span></span><br></pre></td></tr></table></figure>

<p><strong>请注意，直接给 Array 的 length 赋一个新的值会导致 Array 大小的变化</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line">arr.length; <span class="comment">// 3 </span></span><br><span class="line">arr.length = <span class="number">6</span>; arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined] </span></span><br><span class="line">arr.length = <span class="number">2</span>; arr; <span class="comment">// arr变为[1, 2]</span></span><br></pre></td></tr></table></figure>

<p><strong>Array 可以通过索引把对应的元素修改为新的值，因此，对 Array 的索引进行赋值会直接修改这个 Array</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]; </span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">99</span>; </span><br><span class="line">arr; <span class="comment">// arr现在变为[&#x27;A&#x27;, 99, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>请注意，如果通过索引赋值时，索引超过了范围，同样会引起 Array 大小的变化：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">&#x27;x&#x27;</span>; </span><br><span class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a><strong>常见用法：</strong></h3><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a><strong>indexOf</strong></h4><p><strong>与String类似， Array 也可以通过 indexOf() 来搜索一个指定的元素的位置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>]; </span><br><span class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// 元素10的索引为0 </span></span><br><span class="line">arr.indexOf(<span class="number">20</span>); <span class="comment">// 元素20的索引为1 </span></span><br><span class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">// 元素30没有找到，返回-1 </span></span><br><span class="line">arr.indexOf(<span class="string">&#x27;30&#x27;</span>); <span class="comment">// 元素&#x27;30&#x27;的索引为2</span></span><br></pre></td></tr></table></figure>

<h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p><strong>slice() 就是对应String的 substring() 版本，它截取 Array 的部分元素，然后返回一个新的 Array</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]; </span><br><span class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;] </span></span><br><span class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: [&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;] </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]; </span><br><span class="line"><span class="keyword">var</span> aCopy = arr.slice(); </span><br><span class="line">aCopy; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;] </span></span><br><span class="line">aCopy === arr; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h4><p><strong>push()</strong> 向 Array 的<strong>末尾</strong>添加若干元素， <strong>pop()</strong> 则把 Array 的<strong>最后一个元素</strong>删除掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>]; </span><br><span class="line">arr.push(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>); <span class="comment">// 返回Array新的长度: 4 arr; // [1, 2, &#x27;A&#x27;, &#x27;B&#x27;] </span></span><br><span class="line">arr.pop(); <span class="comment">// pop()返回&#x27;B&#x27; </span></span><br><span class="line">arr; <span class="comment">// [1, 2, &#x27;A&#x27;] </span></span><br><span class="line">arr.pop(); arr.pop(); arr.pop(); <span class="comment">// 连续pop 3次 arr; // [] </span></span><br><span class="line">arr.pop(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h4 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h4><p>如果要往 Array 的<strong>头部</strong>添加若干元素，使用 unshift() 方法， shift() 方法则把Array 的第一个元素删掉：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>]; </span><br><span class="line">arr.unshift(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>); <span class="comment">// 返回Array新的长度: 4 </span></span><br><span class="line">arr; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, 1, 2] </span></span><br><span class="line">arr.shift(); <span class="comment">// &#x27;A&#x27; </span></span><br><span class="line">arr; <span class="comment">// [&#x27;B&#x27;, 1, 2] </span></span><br><span class="line">arr.shift(); arr.shift(); arr.shift(); <span class="comment">// 连续shift 3次 </span></span><br><span class="line">arr; <span class="comment">// [] </span></span><br><span class="line">arr.shift(); <span class="comment">// 空数组继续shift不会报错，而是返回undefined </span></span><br><span class="line">arr; <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort() 可以对当前 Array 进行<strong>排序</strong>，它会直接修改当前 Array 的元素位置，直接调用时，按照默认顺序排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]; </span><br><span class="line">arr.sort(); </span><br><span class="line">rr; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>reverse() 把整个 Array 的元素给掉个个，也就是<strong>反转</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]; </span><br><span class="line">arr.reverse(); </span><br><span class="line">rr; <span class="comment">// [&#x27;three&#x27;, &#x27;two&#x27;, &#x27;one&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>splice() 方法是修改 Array 的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</p>
<p><strong>语法：arrayObject.splice(index,howmany,item1,…..,itemX)</strong></p>
<p>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</p>
<p>howmany：必需。要删除的项目数量。如果设置为 0，则不会删除项目。</p>
<p>item1, …, itemX：可选。向数组添加的新项目。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">22</span>)<span class="comment">//返回删除的元素 [1, 2]</span></span><br><span class="line">arr <span class="comment">//(7) [11, 22, 23, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">//只删除不添加</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">//(2) [11, 22]</span></span><br><span class="line">arr <span class="comment">//(5) [23, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">//只添加不删除</span></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)  <span class="comment">//[]</span></span><br><span class="line">arr  <span class="comment">//(8) [11, 22, 33, 23, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>concat() 方法把当前的 Array 和另一个 Array 连接起来，并返回一个新的 Array </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]; </span><br><span class="line"><span class="keyword">var</span> added = arr.concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); </span><br><span class="line">added; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3] </span></span><br><span class="line">arr; <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>请注意， concat() 方法并没有修改当前 Array ，而是返回了一个新的 Array 。实际上， concat() 方法可以接收任意个元素和 Array ，并且自动把 Array 拆开，然后全部添加到新的 Array 里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]; </span><br><span class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4] </span></span><br></pre></td></tr></table></figure>

<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>join() 方法是一个非常实用的方法，它把当前 Array 的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>); <span class="comment">// &#x27;A-B-C-1-2-3&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>如果数组的某个元素又是一个 Array ，则可以形成多维数组，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">&#x27;-&#x27;</span>];</span><br></pre></td></tr></table></figure>



<p>上述 Array 包含3个元素，其中头两个元素本身也是 Array 。</p>
<p>练习：如何通过索引取到 500 这个值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = arr[<span class="number">1</span>][<span class="number">2</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// x应该为500 </span></span><br></pre></td></tr></table></figure>

<h3 id="4-流程控制："><a href="#4-流程控制：" class="headerlink" title="4.流程控制："></a>4.流程控制：</h3><h4 id="4-1for循环"><a href="#4-1for循环" class="headerlink" title="4.1for循环"></a>4.1for循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr= [<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;ali&#x27;</span>,<span class="string">&#x27;tengxun&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;arr.length();i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2无限循环"><a href="#4-2无限循环" class="headerlink" title="4.2无限循环"></a>4.2无限循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span> (;;) &#123; </span><br><span class="line">    <span class="comment">// 将无限循环下去 </span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123; <span class="keyword">break</span>;<span class="comment">// 通过if判断来退出循环 &#125;</span></span><br><span class="line">     x ++;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3for-…-in-，"><a href="#4-3for-…-in-，" class="headerlink" title="4.3for … in ，"></a>4.3for … in ，</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123; </span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty(key)) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(key); <span class="comment">// &#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27; </span></span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4while循环"><a href="#4-4while循环" class="headerlink" title="4.4while循环"></a>4.4while循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">var</span> n = <span class="number">99</span>; </span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123; </span><br><span class="line">    x = x + n; </span><br><span class="line">    n = n - <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line">x; <span class="comment">// 2500</span></span><br></pre></td></tr></table></figure>

<h4 id="4-5-do-while循环"><a href="#4-5-do-while循环" class="headerlink" title="4.5 do while循环"></a>4.5 do while循环</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    n = n + <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">100</span>);</span><br><span class="line">n; <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>











]]></content>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title>js-dom</title>
    <url>/2020/10/19/js-dom/</url>
    <content><![CDATA[<h1 id="dom"><a href="#dom" class="headerlink" title="dom"></a>dom</h1><h2 id="dom简介"><a href="#dom简介" class="headerlink" title="dom简介"></a>dom简介</h2><p><strong>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object MOdel）。</strong></p>
<p><strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树：</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201019110038468.png" alt="image-20201019110038468"></p>
<a id="more"></a>

<h3 id="查找HTML元素"><a href="#查找HTML元素" class="headerlink" title="查找HTML元素"></a>查找HTML元素</h3><p>1.通过id查找html元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElmentById(id)</span><br></pre></td></tr></table></figure>

<p>2.通过标签查找html元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElmentByTagName(标签名)</span><br></pre></td></tr></table></figure>

<p>3.通过类名查找html元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElmentByClassName(<span class="class"><span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="dom-html"><a href="#dom-html" class="headerlink" title="dom html"></a>dom html</h2><p>HTML DOM 允许 JavaScript 改变 HTML 元素的内容。</p>
<h3 id="改变HTML输出流"><a href="#改变HTML输出流" class="headerlink" title="改变HTML输出流"></a>改变HTML输出流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">Mon Oct <span class="number">19</span> <span class="number">2020</span> <span class="number">10</span>:<span class="number">53</span>:<span class="number">31</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>

<h3 id="改变HTML内容"><a href="#改变HTML内容" class="headerlink" title="改变HTML内容"></a>改变HTML内容</h3><p><strong>基本语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).innerHTML=新的 HTML</span><br></pre></td></tr></table></figure>

<h3 id="改变html属性"><a href="#改变html属性" class="headerlink" title="改变html属性"></a>改变html属性</h3><p><strong>基本语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).attribute=新属性值</span><br></pre></td></tr></table></figure>

<p><code>实例</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img id=<span class="string">&quot;image&quot;</span> src=<span class="string">&quot;smiley.gif&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;image&quot;</span>).src=<span class="string">&quot;landscape.jpg&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="dom-css"><a href="#dom-css" class="headerlink" title="dom css"></a>dom css</h2><p>HTML DOM 允许 JavaScript 改变 HTML 元素的样式。</p>
<p><strong>基本语法</strong>如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElmentById(id).style.property=新样式</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id=<span class="string">&quot;p1&quot;</span>&gt;Hello World!&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;p2&quot;</span>&gt;Hello World!&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;p2&quot;</span>).style.color=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;p2&quot;</span>).style.fontFamily=<span class="string">&quot;Arial&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;p2&quot;</span>).style.fontSize=<span class="string">&quot;larger&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="dom事件："><a href="#dom事件：" class="headerlink" title="dom事件："></a>dom事件：</h2><h3 id="触发类型"><a href="#触发类型" class="headerlink" title="触发类型"></a>触发类型</h3><p>html事件包括：</p>
<p>1.当用户点击鼠标时</p>
<p>2.当网页已经加载时</p>
<p>3.当图像已加载时</p>
<p>4.当鼠标移入到元素上时</p>
<p>5.当输入字段被改变时</p>
<p>6.当提交表单时</p>
<p>7.当用户触发按键时</p>
<h3 id="onload和onunload事件"><a href="#onload和onunload事件" class="headerlink" title="onload和onunload事件"></a>onload和onunload事件</h3><p>onload 和 onunload 事件会在用户进入或离开页面时被触发。</p>
<p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p>
<p>onload 和 onunload 事件可用于处理 cookie。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body onload=<span class="string">&quot;checkCookies()&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookies</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (navigator.cookieEnabled==<span class="literal">true</span>)&#123;</span><br><span class="line">		alert(<span class="string">&quot;Cookies 可用&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;Cookies 不可用&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="onchange事件"><a href="#onchange事件" class="headerlink" title="onchange事件"></a>onchange事件</h3><p>onchange 事件常结合对输入字段的验证来使用。</p>
<p>下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">	content.value = content.value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;/p&gt;</span><br><span class="line">请输入你想要输入的内容：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;content&quot;</span> onchange=<span class="string">&quot;change()&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="onmouseover和onmouseout事件"><a href="#onmouseover和onmouseout事件" class="headerlink" title="onmouseover和onmouseout事件"></a>onmouseover和onmouseout事件</h3><p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div onmouseover=<span class="string">&quot;mOver(this)&quot;</span> onmouseout=<span class="string">&quot;mOut(this)&quot;</span> style=<span class="string">&quot;backgroundcolor:#D94A38;width:120px;height:20px;padding:40px;&quot;</span>&gt;Mouse Over Me&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mOver</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">	obj.innerHTML=<span class="string">&quot;Thank You&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mOut</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">	obj.innerHTML=<span class="string">&quot;Mouse Over Me&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="onmousedown、onmouseup"><a href="#onmousedown、onmouseup" class="headerlink" title="onmousedown、onmouseup"></a>onmousedown、onmouseup</h3><p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lighton</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">&#x27;myimage&#x27;</span>).src=<span class="string">&quot;bulbon.gif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lightoff</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">&#x27;myimage&#x27;</span>).src=<span class="string">&quot;bulboff.gif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img id=<span class="string">&quot;myimage&quot;</span> onmousedown=<span class="string">&quot;lighton()&quot;</span> onmouseup=<span class="string">&quot;lightoff()&quot;</span> src=<span class="string">&quot;bulboff.gif&quot;</span> width=<span class="string">&quot;100&quot;</span> height=<span class="string">&quot;180&quot;</span> /&gt;</span><br><span class="line">&lt;p&gt;点击不释放鼠标灯将一直亮着!&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><p>HTML DOM 允许 JavaScript 改变 HTML 元素的内容。</p>
<h3 id="改变HTML输出流-1"><a href="#改变HTML输出流-1" class="headerlink" title="改变HTML输出流"></a>改变HTML输出流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">Mon Oct <span class="number">19</span> <span class="number">2020</span> <span class="number">10</span>:<span class="number">53</span>:<span class="number">31</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>

<h3 id="改变HTML内容-1"><a href="#改变HTML内容-1" class="headerlink" title="改变HTML内容"></a>改变HTML内容</h3><p><strong>基本语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).innerHTML=新的 HTML</span><br></pre></td></tr></table></figure>

<h3 id="改变html属性-1"><a href="#改变html属性-1" class="headerlink" title="改变html属性"></a>改变html属性</h3><p><strong>基本语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).attribute=新属性值</span><br></pre></td></tr></table></figure>

<p><code>实例</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img id=<span class="string">&quot;image&quot;</span> src=<span class="string">&quot;smiley.gif&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;image&quot;</span>).src=<span class="string">&quot;landscape.jpg&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Dom-EventListener"><a href="#Dom-EventListener" class="headerlink" title="Dom EventListener"></a>Dom EventListener</h2><h3 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener()方法"></a>addEventListener()方法</h3><p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, displayDate);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数的内容根据自己的需求来定义</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<p>addEventListener() 方法用于向指定元素添加事件句柄。</p>
<p>addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。</p>
<p>你可以向一个元素添加多个事件句柄。</p>
<p>你可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。</p>
<p>你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。</p>
<p>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。</p>
<p>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。</p>
<p>你可以使用 removeEventListener() 方法来移除事件的监听。</p>
<p><strong>基本语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.addEventListener(event,<span class="function"><span class="keyword">function</span>,<span class="title">useCapture</span>)</span>;</span><br><span class="line"><span class="comment">//event是事件的类型</span></span><br><span class="line"><span class="comment">//function是事件触发后调用的函数</span></span><br><span class="line"><span class="comment">//useCapture是一个布尔值，用于描述事件是冒泡还是捕获。该参数可选。</span></span><br></pre></td></tr></table></figure>

<h3 id="向同一个元素中添加多个事件句柄"><a href="#向同一个元素中添加多个事件句柄" class="headerlink" title="向同一个元素中添加多个事件句柄"></a>向同一个元素中添加多个事件句柄</h3><p>addEventListener() 方法允许向同一个元素添加多个事件，且不会覆盖已存在的事件，同时你还可以向同个元素添加不同类型的事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>, myFunction);</span><br><span class="line">element.addEventListener(<span class="string">&quot;click&quot;</span>, mySecondFunction);</span><br><span class="line">element.addEventListener(<span class="string">&quot;mouseover&quot;</span>, myFunction);</span><br><span class="line">element.addEventListener(<span class="string">&quot;mouseout&quot;</span>, myThirdFunction);</span><br></pre></td></tr></table></figure>

<h3 id="向-Window-对象添加事件句柄"><a href="#向-Window-对象添加事件句柄" class="headerlink" title="向 Window 对象添加事件句柄"></a>向 Window 对象添加事件句柄</h3><p>addEventListener() 方法允许你在 HTML DOM 对象添加事件监听， HTML DOM 对象如： HTML 元素, HTML 文档, window 对象。或者其他支出的事件对象如: xmlHttpRequest 对象。</p>
<p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当用户改变浏览器窗口大小时，</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = <span class="built_in">Math</span>.random();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="事件冒泡或事件捕获"><a href="#事件冒泡或事件捕获" class="headerlink" title="事件冒泡或事件捕获"></a>事件冒泡或事件捕获</h3><p>事件传递有两种方式：冒泡与捕获。</p>
<p>事件传递定义了元素事件触发的顺序。 如果你将 </p><p> 元素插入到 <div> 元素中，用户点击 <p> 元素, 哪个元素的 “click” 事件先被触发呢？</p>
<p>在 <em>冒泡</em> 中，内部元素的事件会先被触发，然后再触发外部元素，即： </p><p> 元素的点击事件先触发，然后会触发 <div> 元素的点击事件。</div></p>
<p>在 <em>捕获</em> 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： <div> 元素的点击事件先触发 ，然后再触发 <p> 元素的点击事件。</p>
<h3 id="removeEventListener-方法"><a href="#removeEventListener-方法" class="headerlink" title="removeEventListener() 方法"></a>removeEventListener() 方法</h3><p>removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:</p>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, myFunction);</span><br></pre></td></tr></table></figure>

<h2 id="向文档中添加和移除元素（节点）"><a href="#向文档中添加和移除元素（节点）" class="headerlink" title="向文档中添加和移除元素（节点）"></a>向文档中添加和移除元素（节点）</h2><h3 id="创建新的html元素（节点）"><a href="#创建新的html元素（节点）" class="headerlink" title="创建新的html元素（节点）"></a>创建新的html元素（节点）</h3><p>**appendChild()**是用于添加新元素到尾部。如果我们想要将新元素添加到开始位置，可以使用insertBefore()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;p&gt;first&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;second&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//节点标签</span></span><br><span class="line">         <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">		<span class="comment">//标签的内容</span></span><br><span class="line">         <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;new&quot;</span>);</span><br><span class="line">         para.appendChild(node);</span><br><span class="line"><span class="comment">//添加到尾部</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>).appendChild(para);</span><br><span class="line"><span class="comment">//添加到开始位置</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>).insertBefore(para);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="移除已存在的元素"><a href="#移除已存在的元素" class="headerlink" title="移除已存在的元素"></a>移除已存在的元素</h3><p>注：如果想要移除一个元素，就要知道该元素的父元素</p>
<p><strong>基本语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;p1&quot;</span>&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;p2&quot;</span>&gt;这是另外一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">parent.removeChild(child);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="替换HTML元素-replaceChild"><a href="#替换HTML元素-replaceChild" class="headerlink" title="替换HTML元素-replaceChild()"></a>替换HTML元素-replaceChild()</h3><p><strong>实例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;p1&quot;</span>&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;p2&quot;</span>&gt;这是另外一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;这是一个新的段落。&quot;</span>);</span><br><span class="line">para.appendChild(node);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">parent.replaceChild(para, child);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个新的段落。</span></span><br><span class="line"><span class="comment">//这是另外一个段落。</span></span><br></pre></td></tr></table></figure>

<h2 id="HTMLCollection对象"><a href="#HTMLCollection对象" class="headerlink" title="HTMLCollection对象"></a>HTMLCollection对象</h2><p>getElementsByTagName() 方法返回 <a href="https://www.runoob.com/jsref/dom-htmlcollection.html">HTMLCollection</a> 对象。</p>
<p>HTMLCollection 对象类似包含 HTML 元素的一个数组。</p>
<h2 id="HTML-NodeList对象"><a href="#HTML-NodeList对象" class="headerlink" title="HTML NodeList对象"></a>HTML NodeList对象</h2><p><strong>NodeList</strong> 对象是一个从文档中获取的节点列表 (集合) 。</p>
<p>NodeList 对象类似 <a href="https://www.runoob.com/js/js-htmldom-elements.html">HTMLCollection</a> 对象。</p>
<p>一些旧版本浏览器中的方法（如：**getElementsByClassName()**）返回的是 NodeList 对象，而不是 HTMLCollection 对象。</p>
<p>所有浏览器的 <strong>childNodes</strong> 属性返回的是 NodeList 对象。</p>
<p>大部分浏览器的 <strong>querySelectorAll()</strong> 返回 NodeList 对象。</p>
<p>以下代码选取了整个文档中所有</p><p>节点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myNodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Collection与NodeList的区别"><a href="#Collection与NodeList的区别" class="headerlink" title="Collection与NodeList的区别"></a>Collection与NodeList的区别</h2><p><a href="https://www.runoob.com/js/js-htmldom-collections.html">HTMLCollection</a> 是 HTML 元素的集合。</p>
<p>NodeList 是一个文档节点的集合。</p>
<p>NodeList 与 HTMLCollection 有很多类似的地方。</p>
<p>NodeList 与 HTMLCollection 都与数组对象有点类似，可以使用索引 (0, 1, 2, 3, 4, …) 来获取元素。</p>
<p>NodeList 与 HTMLCollection 都有 length 属性。</p>
<p>HTMLCollection 元素可以通过 name，id 或索引来获取。</p>
<p>NodeList 只能通过索引来获取。</p>
<p>只有 NodeList 对象有包含属性节点和文本节点。</p>
<p>注：<strong>节点列表不是一个数组！</strong></p>
<p>节点列表看起来可能是一个数组，但其实不是。</p>
<p>你可以像数组一样，使用索引来获取元素。</p>
<p>节点列表无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。</p>
</div></p></div></p>]]></content>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title>text</title>
    <url>/2020/12/07/text/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>springboot入门案例</title>
    <url>/2020/12/05/springboot%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="1-配置数据库的连接"><a href="#1-配置数据库的连接" class="headerlink" title="1.配置数据库的连接"></a>1.配置数据库的连接</h2><p>打开新建好的springboot项目，再src&gt;main&gt;resource目录下新建一个application.yml的文件来填写数据库连接配置文件</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/test?useUnicode=true&amp;serverTimeZone=UTC&amp;characterEncoding=utf-8</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置好之后咱们简单的测试一下</p>
<p>在src&gt;test&gt;java&gt;com&gt;LoginApplicationTests的启动类中注入数据源，然后打印一下数据源的类信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果启动出现以下内容就显示连接成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">zaxxer</span>.<span class="title">hikari</span>.<span class="title">HikariDataSource</span></span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置项目的三层架构"><a href="#2-配置项目的三层架构" class="headerlink" title="2.配置项目的三层架构"></a>2.配置项目的三层架构</h2><img src="/.io//12/05/springboot%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20201205154456212.png" class title="This is an example image">



<h2 id="3-开始编写"><a href="#3-开始编写" class="headerlink" title="3.开始编写"></a>3.开始编写</h2><h3 id="3-1编写用户的实体类"><a href="#3-1编写用户的实体类" class="headerlink" title="3.1编写用户的实体类"></a>3.1编写用户的实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//getter和setter方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//有参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2编写mapper层"><a href="#3-2编写mapper层" class="headerlink" title="3.2编写mapper层"></a>3.2编写mapper层</h3><p>首先导入mybatis的maven依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>mapper层内</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span> <span class="comment">//用于mapper的映射</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//将此类表示为一个Bean，可以让spring扫描到</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户的注册</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//用户的登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis的xml文件的编写</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;!--namespace用于绑定mapper接口的，即面向接口编程--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;!--用户的注册--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;register&quot;</span> parameterType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">        <span class="function">insert into user <span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;password&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">    &lt;!--用户的登录--&gt;</span></span><br><span class="line"><span class="function">    &lt;select id</span>=<span class="string">&quot;login&quot;</span> parameterType=<span class="string">&quot;User&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">        select * from user where username=#&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3编写service"><a href="#3-3编写service" class="headerlink" title="3.3编写service"></a>3.3编写service</h3><p>service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户的注册</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">    <span class="comment">//用户的登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="comment">//将该类注册到spring容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="comment">//用户的注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        userMapper.register(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户的登录</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> userMapper.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4编写controller层"><a href="#3-4编写controller层" class="headerlink" title="3.4编写controller层"></a>3.4编写controller层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://192.168.1.10:8080&quot;, maxAge = 3600)</span> <span class="comment">//解决跨域的问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用户的登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="meta">@PathParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@PathParam(&quot;password&quot;)</span>String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用service完成注册</span></span><br><span class="line">        userService.register(username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用户的登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(<span class="meta">@PathParam(&quot;username&quot;)</span>String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@PathParam(&quot;password&quot;)</span>String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用service完成登录</span></span><br><span class="line">        <span class="keyword">return</span> userService.login(username,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实现过程中会出现跨域的问题解决的办法见另一篇博客<a href="https://www.yizhiyuya.cn/2020/12/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/">跨域问题的解决</a></p>
<p>至此一个简单的登录注册案例就完成了，快去实现吧。</p>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot的新建</title>
    <url>/2020/12/05/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>选择一种自己喜欢的编辑器，我选择是idea</p>
<p>首先选择File——》New——》Project然后选择图中的选项</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201205150636189.png" alt="image-20201205150636189"></p>
<p>点击Next,进入一下画面</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201205150817362.png" alt="image-20201205150817362"></p>
<p>红色箭头标注的为你可以按照自己的需求修改的地方，修改好后点击Next</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201205151147904.png" alt="image-20201205151147904"></p>
<p>点击next</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201205151301038.png" alt="image-20201205151301038"></p>
<p>然后点击finish，一个springboot项目于就初始化完成了</p>
]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>vue/cli安装使用</title>
    <url>/2020/11/22/vue-cli%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h1><p>在安装Vue CLI之前，我们呢需要下载安装Node.js</p>
<a id="more"></a>

<p>下载链接：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201122210145475.png" alt="image-20201122210145475"></p>
<p>下载之后直接安装，安装选项默认即可，注意安装地址的更换。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/12980337-13fae4ff6e8825ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
<p>安装完成后，打开cmd或终端，输入命令node -v，出现版本号就代表成功了：</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201122210401953.png" alt="image-20201122210401953"></p>
<p>由于npm在使用时的网速较慢，需要换成淘宝的镜像</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p>接着就是安装Vue CLI了，可以在cmd或终端输入一下命令</p>
<p>安装2.x版本的vue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>安装3.x版本的vue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install -g <span class="meta">@vue</span>/cli</span><br></pre></td></tr></table></figure>

<p>然后就可以等待安装完成，完成可以通过命令查看是否安装成功</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201122211051162.png" alt="image-20201122211051162"></p>
<h1 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h1><p>下面就详细展示一下如何通过vue cli脚手架创建一个vue项目</p>
<p>打开cmd或者自己使用习惯的编译器来创建一个vue项目，这里以vs code为例。cd进入一个自己想要创建项目的目录输入以下命令：</p>
<p><code>vue init webpack 项目名</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">? Project name blog -------&gt;让你确认项目名</span><br><span class="line">? Project description A Vue.js project -----------&gt;确认是否生成描述文件</span><br><span class="line">? Author waven ----------&gt;选择作者</span><br><span class="line">? Vue build standalone----------&gt;将es6语法转换为es5</span><br><span class="line">? Install vue-router? Yes -------&gt;附带安装vue路由</span><br><span class="line"><span class="comment">//一下三个全部选no即可</span></span><br><span class="line">? Use ESLint to lint your code? No</span><br><span class="line">? <span class="built_in">Set</span> up unit tests No</span><br><span class="line">? Setup e2e tests <span class="keyword">with</span> Nightwatch? No</span><br><span class="line">? Should we run <span class="string">`npm install`</span> <span class="keyword">for</span> you after the project has been created? (recommended) npm -----&gt;选择npm管理工具</span><br></pre></td></tr></table></figure>

<p>创建完成以后，查看一下该项目的结构</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201122212317603.png" alt="image-20201122212317603"></p>
<p>至此为止，就完成了使用vue cli脚手架创建一个项目。加油学习吧！</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router快速入门</title>
    <url>/2020/11/27/vue-router%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="vue-router快速入门"><a href="#vue-router快速入门" class="headerlink" title="vue-router快速入门"></a>vue-router快速入门</h1><a id="more"></a>

<h2 id="1-引入vue和vue-router的js文件"><a href="#1-引入vue和vue-router的js文件" class="headerlink" title="1.引入vue和vue-router的js文件"></a>1.引入vue和vue-router的js文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入文件 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/vue-router_3.0.2.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-添加路由连接"><a href="#2-添加路由连接" class="headerlink" title="2.添加路由连接"></a>2.添加路由连接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加路由连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User组件<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register组件<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-添加路由填充位"><a href="#3-添加路由填充位" class="headerlink" title="3.添加路由填充位"></a>3.添加路由填充位</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加路由填充位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-定义路由组件"><a href="#4-定义路由组件" class="headerlink" title="4.定义路由组件"></a>4.定义路由组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义路由组件</span></span><br><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;h1&gt;User组件&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Register = &#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;h1&gt;Register组件&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-创建路由实例化对象-最为重要"><a href="#5-创建路由实例化对象-最为重要" class="headerlink" title="5.创建路由实例化对象(最为重要)"></a>5.创建路由实例化对象(最为重要)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建路由实例化对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">//配置路由规则</span></span><br><span class="line">    routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/user&#x27;</span>,<span class="attr">component</span>:User&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/register&#x27;</span>,<span class="attr">component</span>:Register&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="6-将router对象挂载到vue实例中"><a href="#6-将router对象挂载到vue实例中" class="headerlink" title="6.将router对象挂载到vue实例中"></a>6.将router对象挂载到vue实例中</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data: &#123;&#125;,</span><br><span class="line"><span class="comment">//将router对象挂到vue实例中</span></span><br><span class="line">router: router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue七大属性</title>
    <url>/2020/11/27/vue%E4%B8%83%E5%A4%A7%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Vue七大属性"><a href="#Vue七大属性" class="headerlink" title="Vue七大属性"></a>Vue七大属性</h1><a id="more"></a>

<h2 id="1-el"><a href="#1-el" class="headerlink" title="1.el"></a>1.el</h2><p>获取dom对象</p>
<h2 id="2-data"><a href="#2-data" class="headerlink" title="2.data"></a>2.data</h2><p>用于存放数据</p>
<h3 id="2-1条件判断"><a href="#2-1条件判断" class="headerlink" title="2.1条件判断"></a>2.1条件判断</h3><h4 id="2-1-1-v-if"><a href="#2-1-1-v-if" class="headerlink" title="2.1.1 v-if"></a>2.1.1 v-if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app3&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        seen: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-v-else"><a href="#2-1-2-v-else" class="headerlink" title="2.1.2 v-else"></a>2.1.2 v-else</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random()&gt;0.5&quot;</span>&gt;</span></span><br><span class="line">    You can see me!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    you can not;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2循环v-for"><a href="#2-2循环v-for" class="headerlink" title="2.2循环v-for"></a>2.2循环v-for</h3><p>html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app4&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        todos: [</span><br><span class="line">            &#123;<span class="attr">text</span>: <span class="string">&#x27;学习JavaScript&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">text</span>: <span class="string">&#x27;学习vue&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">text</span>: <span class="string">&#x27;整个大项目&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3-methods："><a href="#3-methods：" class="headerlink" title="3.methods："></a>3.methods：</h2><p>方法必须定义在Vue的methods的对象中</p>
<h3 id="3-1-v-on事件绑定"><a href="#3-1-v-on事件绑定" class="headerlink" title="3.1 v-on事件绑定"></a>3.1 v-on事件绑定</h3><p>可以使用<strong>v-on</strong>指令监听DOM事件，并在出发时运行一些JavaScript代码</p>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;alert()&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;hello Vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        alert: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-v-model"><a href="#3-2-v-model" class="headerlink" title="3.2 v-model"></a>3.2 v-model</h3><p>你可以用v-model指令在表单<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p><strong>注：</strong><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
<p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击我&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message:&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;hello Vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-component"><a href="#4-component" class="headerlink" title="4.component"></a>4.component</h2><h3 id="4-1-全局注册组件："><a href="#4-1-全局注册组件：" class="headerlink" title="4.1 全局注册组件："></a>4.1 全局注册组件：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义规则</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ... 选项 ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>范例：</strong></p>
<p>html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:item</span> = <span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;item&#x27;</span>,&#123;</span><br><span class="line">    props:[<span class="string">&#x27;item&#x27;</span>],<span class="comment">//</span></span><br><span class="line">    template: <span class="string">&#x27;&lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//vue实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&#x27;hello Vue&#x27;</span>,</span><br><span class="line">        items:[<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;linux&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-axios异步通信"><a href="#5-axios异步通信" class="headerlink" title="5.axios异步通信"></a>5.axios异步通信</h2><p>首先需要明白Vue的生命周期，主要还是利用Vue在模板渲染完毕后渲染数据发送请求，从而将数据展示页面。</p>
<p><img src="https://img-blog.csdnimg.cn/20190107221323124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21xaW5nbw==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>图中红色框内的内容称为钩子函数</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue入门实例</title>
    <url>/2020/11/27/vue%E5%85%A5%E9%97%A8%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="title-vue入门实例"><a href="#title-vue入门实例" class="headerlink" title="title:vue入门实例"></a>title:vue入门实例</h1><a id="more"></a>

<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><h3 id="Vue是一套用于构建用户界面的渐进式框架，与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用"><a href="#Vue是一套用于构建用户界面的渐进式框架，与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用" class="headerlink" title="Vue是一套用于构建用户界面的渐进式框架，与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用"></a>Vue是一套用于构建用户界面的渐进式框架，与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用</h3><h3 id="渐进式框架：声明式渲染——》组件系统——》客户端路由——》集中状态管理——》项目构建"><a href="#渐进式框架：声明式渲染——》组件系统——》客户端路由——》集中状态管理——》项目构建" class="headerlink" title="渐进式框架：声明式渲染——》组件系统——》客户端路由——》集中状态管理——》项目构建"></a>渐进式框架：声明式渲染——》组件系统——》客户端路由——》集中状态管理——》项目构建</h3><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="声明式渲染："><a href="#声明式渲染：" class="headerlink" title="声明式渲染："></a>声明式渲染：</h2><p>Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello Vue!</span><br></pre></td></tr></table></figure>

<h2 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h2><p>组件系统是Vue的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p>
<p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201028104545682.png" alt="image-20201028104545682"></p>
<p>在Vue里，一个组件本质上是一个拥有预定义选项的一个Vue实例。在Vue中注册组件很简单：</p>
<p>html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app7&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">             现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="comment">            todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="comment">            我们也需要为每个组件提供一个“key”，</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">             &lt;todo-item</span><br><span class="line">                v-for=&quot;item in groceryList&quot;</span><br><span class="line">                v-bind:todo=&quot;item&quot;</span><br><span class="line">                v-bind:key=&quot;item.id&quot;</span><br><span class="line">            &gt;<span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义名为 todo-item 的新组件</span></span><br><span class="line">       Vue.component(<span class="string">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class="line">           <span class="comment">//todo-item组件现在接受一个&quot;prop&quot;,</span></span><br><span class="line">           <span class="comment">//类似于一个自定义的attribute.</span></span><br><span class="line">           <span class="comment">//这个prop名为todo</span></span><br><span class="line">           props: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">           template: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">           el: <span class="string">&#x27;#app7&#x27;</span>,</span><br><span class="line">           data: &#123;</span><br><span class="line">               groceryList: [</span><br><span class="line">                   &#123; <span class="attr">id</span>:<span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;蔬菜&#x27;</span>&#125;,</span><br><span class="line">                   &#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;奶酪&#x27;</span>&#125;,</span><br><span class="line">                   &#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;牛肉&#x27;</span>&#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蔬菜</span><br><span class="line">奶酪</span><br><span class="line">牛肉</span><br></pre></td></tr></table></figure>

<h2 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h2><p>当一个Vue实例被创建时，他将<strong>data</strong>对象中的所有的property加入到Vue的响应式系统中。当这些property的值发生改变时，视图将发生”响应“，即匹配更新为新的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们的数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//将对象加入到一个Vue实例中</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data:data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data.a<span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// 设置 property 也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// =&gt; 2</span></span><br><span class="line"><span class="comment">// ……反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>

<p>当这些数据改变时，试图会进行重新渲染。值得注意的是只有当实例被创建时就已经存在于data中的property才是响应式的。也就是说如果添加一个新的property，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.b= <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure>

<p>那么b的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个property，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  visitCount: <span class="number">0</span>,</span><br><span class="line">  hideCompletedTodos: <span class="literal">false</span>,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里唯一例外的是使用<strong>Object.freeze()</strong>,这回阻止修改现有的property，也就意味着响应式系统无法在追踪改变。</p>
<p>除了数据property，Vue实例中还暴露了一些有用的实例property与方法。他们都有前缀$,以便于与用户定义的property区分开来。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.$data === data <span class="comment">// =&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">&#x27;example&#x27;</span>) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<h2 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h2><p>每个Vue实例在被创建时都要经过一系列的初始化过程—-例如，需要设置数据监听、编译模板、将实例挂载到DOM并在数据变化是更新Dom。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同的阶段添加自己代码的机会。</p>
<p>比如<strong>created</strong>钩子可以用来在一个实例被创建之后执行代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is: &#x27;</span> + <span class="built_in">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; &quot;a is: 1&quot;</span></span><br></pre></td></tr></table></figure>

<p>也有一些其他的钩子，在实例生命周期的不同阶段被调用，如<strong>mounted、updated、destroyed</strong>。生命周期钩子的this上下文指向调用它的Vue实例。</p>
<h2 id="生命周期图"><a href="#生命周期图" class="headerlink" title="生命周期图"></a>生命周期图</h2><p><img src="/.io//Users\17356\AppData\Roaming\Typora\typora-user-images\image-20201028203238970.png" alt="image-20201028203238970"></p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>数组拼接</title>
    <url>/2020/10/19/%E6%95%B0%E7%BB%84%E6%8B%BC%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h1><p>需求：从键盘输入两个数组，然后将两个数组拼接成一个数组，并且要求两个数组对应位上的数据放在一块，同一数组中的数据不能连载一起。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 数组的拼接 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘的输入</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> arr1[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> arr2[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数组中的元素&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            arr1[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请你输入第二个数组中的元素&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            arr2[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//定义两个变量，分别作为两个小数组的索引值</span></span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                arr[i]=arr1[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                arr[i]=arr2[k];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;拼接后的数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>需求提升：</strong>一次性输入所有的数据，用空格或者逗号隔开，然后将数据平均分到两个数组中，最终完成两个数组的对应拼接，需求同上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tset3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String inputString = sc.nextLine();</span><br><span class="line">        String stringArray[] = inputString.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num[] = <span class="keyword">new</span> <span class="keyword">int</span>[stringArray.length];</span><br><span class="line">        <span class="keyword">int</span> num1[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> num2[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> num3[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stringArray.length; i++) &#123;</span><br><span class="line">            num[i] = Integer.parseInt(stringArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            num1[i]=num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;第一个数组：&quot;</span>+<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num1.length; i++) &#123;</span><br><span class="line">            System.out.print(+num1[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i==num1.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(num1[i]+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;第二个数组：&quot;</span>+<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num2.length; i++) &#123;</span><br><span class="line">            System.out.print(+num2[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i==num2.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(num2[i]+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">            num2[i-<span class="number">4</span>]=num[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num3.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                num3[i]=num1[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                num3[i]=num2[k];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;组合后：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num3.length; i++) &#123;</span><br><span class="line">            System.out.print(num3[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span></span><br><span class="line">第一个数组：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>] </span><br><span class="line">第二个数组：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] </span><br><span class="line">组合后：<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">4</span>,<span class="number">44</span>,</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>独一无二出现的次数</title>
    <url>/2020/11/27/%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h1 id="title-独一无二出现的次数"><a href="#title-独一无二出现的次数" class="headerlink" title="title:独一无二出现的次数"></a>title:独一无二出现的次数</h1><h3 id="题目：给你一个整数数组-arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回-true；否则返回-false。"><a href="#题目：给你一个整数数组-arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回-true；否则返回-false。" class="headerlink" title="题目：给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。"></a>题目：给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</h3><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心思想:利用hashmap来统计数组中不同数字出现的次数，然后将map中的值存入一个集合values，通过set.addAll()再将集合values中不同的数字存入集合set中。最终比较values和set的长度。</span></span><br></pre></td></tr></table></figure>

<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 独一无二出现的次数 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(unique(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">unique</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = arr.length;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(length);</span><br><span class="line">        <span class="comment">//统计出现的不同的数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i :</span><br><span class="line">                arr) &#123;</span><br><span class="line">            map.put(i, map.getOrDefault(i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将不同的数字存入一个集合</span></span><br><span class="line">        Collection&lt;Integer&gt; values = map.values();</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.addAll(values);</span><br><span class="line">        <span class="comment">//将map中的键存入set1集合中</span></span><br><span class="line">        Set set1 = map.keySet();</span><br><span class="line">        Iterator iter = set1.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> key = (<span class="keyword">int</span>) iter.next();</span><br><span class="line">            <span class="keyword">int</span> value = map.get(key);</span><br><span class="line">            System.out.print(<span class="string">&quot;数字&quot;</span>+key+<span class="string">&quot;出现了&quot;</span>+value+<span class="string">&quot;次，&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values.size()==set.size();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>注解与反射</title>
    <url>/2020/11/26/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。</p>
<h2 id="内置注解："><a href="#内置注解：" class="headerlink" title="内置注解："></a>内置注解：</h2><p>1.@Override:定义于java.lang.Override。此注释只使用于修辞手法，表示一个方法声明打算重写超类中的另一个方法声明。</p>
<p>2.@Deprecated：此注释可以用于修辞手法、属性、类；表示不推荐使用，</p>
<p>3.@SuppressWarning:用于抑制编译时的警告信息，使用时需要附带参数。</p>
<h2 id="元注解："><a href="#元注解：" class="headerlink" title="元注解："></a>元注解：</h2><p><strong>元注解用于注解其他注解</strong></p>
<p>1.@Target：用于描述注解的作用范围</p>
<p>2.@Retention：表示需要在什么级别保存该注解信息，用于描述注解的生命周期</p>
<p>3.@Document：标记这个注解是否存于用户文档中</p>
<p>4.@Inherited：用于描述该注解的继承性</p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射就是把java类中的各种成分映射成一个个的Java对象<br>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。</p>
<p><strong>Java反射机制提供的功能：</strong></p>
<p>1.在运行时判断任意一个对象所属的类</p>
<p>2.在运行时构造任意一个类的对像</p>
<p>3.在运行时判断任意一个类所具有的成员变量和方法</p>
<p>4.在运行时获取泛型信息</p>
<p>5.在运行时调用任意一个对象的成员变量和方法</p>
<p>6.在运行时处理注解</p>
<p>7.生成动态代理</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域问题</title>
    <url>/2020/12/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>1.添加一个配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2.添加一个拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Filter;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE, HEAD&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;access-control-allow-origin, authority, content-type, version-info, X-Requested-With&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoggable</span><span class="params">(LogRecord record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.在需要解决跨域的controller层中加入以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://192.168.1.10:8080&quot;, maxAge = 3600)</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
</search>
